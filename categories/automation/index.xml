<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>automation on DOVH</title>
    <link>https://dovh.io/categories/automation/</link>
    <description>Recent content in automation on DOVH</description>
    <image>
      <url>https://dovh.io/img/logo.png</url>
      <link>https://dovh.io/img/logo.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 04 Oct 2022 09:00:00 +0000</lastBuildDate><atom:link href="https://dovh.io/categories/automation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Raspberry Pi 4 Kubernetes cluster</title>
      <link>https://dovh.io/posts/2022-10-04-pi-cluster/</link>
      <pubDate>Tue, 04 Oct 2022 09:00:00 +0000</pubDate>
      
      <guid>https://dovh.io/posts/2022-10-04-pi-cluster/</guid>
      <description>Installation Prepare the image for Raspberry Pi Download Pi imager
Setup each nodes SD card
k3s Install To install k3s on Raspberry pi-cluster i have used awesome opensource project k3s-ansible
Follow the instructions on how to install k3s in the projects readme.</description>
    </item>
    
    <item>
      <title>Docker image with buildx inside</title>
      <link>https://dovh.io/posts/2022-05-26-docker-with-buildx/</link>
      <pubDate>Thu, 26 May 2022 09:00:00 +0000</pubDate>
      
      <guid>https://dovh.io/posts/2022-05-26-docker-with-buildx/</guid>
      <description>Base docker image with buildx Base docker image with docker and buildx installed in it. This image was created for use in GitLab CI for building multiarch images.
GitHub Repo</description>
    </item>
    
    <item>
      <title>Automatic release drafting to Github Releases</title>
      <link>https://dovh.io/posts/2021-05-20-github-actions-automatic-release/</link>
      <pubDate>Thu, 20 May 2021 09:00:00 +0000</pubDate>
      
      <guid>https://dovh.io/posts/2021-05-20-github-actions-automatic-release/</guid>
      <description>Generate draft release on GitHub with GitHub Actions I was trying to find a way to do GitHub releases with GitHub Actions or GitLab CI. When I happen to find semantic-release project. One of the benefits of GitHub Actions is that the majority of its users open source their workflows by default. I was able to kick start my workflow for keeping up with releases thanks to code from benmvp, a GitHub user and keynote speaker.</description>
    </item>
    
    <item>
      <title>GitHub Actions</title>
      <link>https://dovh.io/posts/2021-05-20-github-actions-basics/</link>
      <pubDate>Thu, 20 May 2021 09:00:00 +0000</pubDate>
      
      <guid>https://dovh.io/posts/2021-05-20-github-actions-basics/</guid>
      <description>GitHub Actions and Workflows Github Actions enables you to create custom software development lifecycle workflows directly in your Github repository. These workflows are made out of different tasks so-called actions that can be run automatically on certain events.
This enables you to include Continues Integration (CI) and continuous deployment (CD) capabilities and many other features directly in your repository.
Why care about Github Actions? Before we get into the technical detail let&amp;rsquo;s discussed why developers should care about Github Actions in the first place and which benefits they provide.</description>
    </item>
    
    <item>
      <title>Terraform DNS Cloudflare</title>
      <link>https://dovh.io/posts/2023-24-04-terraform-dns-cloudflare/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dovh.io/posts/2023-24-04-terraform-dns-cloudflare/</guid>
      <description>Terraform DNS Cloudflare Terraform automates Cloudflare DNS record creation and management, saving time and reducing errors for large domains.
A custom module is used to create records for the &amp;ldquo;example.com&amp;rdquo; domain. The zone ID is retrieved via the &amp;ldquo;cloudflare_zone&amp;rdquo; data source and passed to the module along with the records to create. Records are organized by type (A, CNAME, MX, and TXT) and created as separate resources with the appropriate parameters.</description>
    </item>
    
  </channel>
</rss>
